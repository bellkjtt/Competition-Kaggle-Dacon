{"metadata":{"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8262444,"sourceType":"datasetVersion","datasetId":4904249}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"### 라이브러리 설치","metadata":{}},{"cell_type":"code","source":"!pip install torch evaluate accelerate==0.27.2 dataset transformers scikit-learn pandas tqdm","metadata":{"execution":{"iopub.status.busy":"2024-04-30T09:18:16.516749Z","iopub.execute_input":"2024-04-30T09:18:16.517457Z","iopub.status.idle":"2024-04-30T09:18:34.588108Z","shell.execute_reply.started":"2024-04-30T09:18:16.517427Z","shell.execute_reply":"2024-04-30T09:18:34.586865Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Requirement already satisfied: torch in /opt/conda/lib/python3.10/site-packages (2.1.2)\nCollecting evaluate\n  Downloading evaluate-0.4.1-py3-none-any.whl.metadata (9.4 kB)\nCollecting accelerate==0.27.2\n  Downloading accelerate-0.27.2-py3-none-any.whl.metadata (18 kB)\nCollecting dataset\n  Downloading dataset-1.6.2-py2.py3-none-any.whl.metadata (1.9 kB)\nRequirement already satisfied: transformers in /opt/conda/lib/python3.10/site-packages (4.39.3)\nRequirement already satisfied: scikit-learn in /opt/conda/lib/python3.10/site-packages (1.2.2)\nRequirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (2.1.4)\nRequirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (4.66.1)\nRequirement already satisfied: numpy>=1.17 in /opt/conda/lib/python3.10/site-packages (from accelerate==0.27.2) (1.26.4)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from accelerate==0.27.2) (21.3)\nRequirement already satisfied: psutil in /opt/conda/lib/python3.10/site-packages (from accelerate==0.27.2) (5.9.3)\nRequirement already satisfied: pyyaml in /opt/conda/lib/python3.10/site-packages (from accelerate==0.27.2) (6.0.1)\nRequirement already satisfied: huggingface-hub in /opt/conda/lib/python3.10/site-packages (from accelerate==0.27.2) (0.22.2)\nRequirement already satisfied: safetensors>=0.3.1 in /opt/conda/lib/python3.10/site-packages (from accelerate==0.27.2) (0.4.3)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch) (3.13.1)\nRequirement already satisfied: typing-extensions in /opt/conda/lib/python3.10/site-packages (from torch) (4.9.0)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch) (1.12)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch) (3.2.1)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch) (3.1.2)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch) (2024.2.0)\nRequirement already satisfied: datasets>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from evaluate) (2.18.0)\nRequirement already satisfied: dill in /opt/conda/lib/python3.10/site-packages (from evaluate) (0.3.8)\nRequirement already satisfied: requests>=2.19.0 in /opt/conda/lib/python3.10/site-packages (from evaluate) (2.31.0)\nRequirement already satisfied: xxhash in /opt/conda/lib/python3.10/site-packages (from evaluate) (3.4.1)\nRequirement already satisfied: multiprocess in /opt/conda/lib/python3.10/site-packages (from evaluate) (0.70.16)\nCollecting responses<0.19 (from evaluate)\n  Downloading responses-0.18.0-py3-none-any.whl.metadata (29 kB)\nCollecting sqlalchemy<2.0.0,>=1.3.2 (from dataset)\n  Downloading SQLAlchemy-1.4.52-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (10 kB)\nRequirement already satisfied: alembic>=0.6.2 in /opt/conda/lib/python3.10/site-packages (from dataset) (1.13.1)\nCollecting banal>=1.0.1 (from dataset)\n  Downloading banal-1.0.6-py2.py3-none-any.whl.metadata (1.4 kB)\nRequirement already satisfied: regex!=2019.12.17 in /opt/conda/lib/python3.10/site-packages (from transformers) (2023.12.25)\nRequirement already satisfied: tokenizers<0.19,>=0.14 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.15.2)\nRequirement already satisfied: scipy>=1.3.2 in /opt/conda/lib/python3.10/site-packages (from scikit-learn) (1.11.4)\nRequirement already satisfied: joblib>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from scikit-learn) (1.4.0)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn) (3.2.0)\nRequirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas) (2023.3.post1)\nRequirement already satisfied: tzdata>=2022.1 in /opt/conda/lib/python3.10/site-packages (from pandas) (2023.4)\nRequirement already satisfied: Mako in /opt/conda/lib/python3.10/site-packages (from alembic>=0.6.2->dataset) (1.3.3)\nRequirement already satisfied: pyarrow>=12.0.0 in /opt/conda/lib/python3.10/site-packages (from datasets>=2.0.0->evaluate) (15.0.2)\nRequirement already satisfied: pyarrow-hotfix in /opt/conda/lib/python3.10/site-packages (from datasets>=2.0.0->evaluate) (0.6)\nRequirement already satisfied: aiohttp in /opt/conda/lib/python3.10/site-packages (from datasets>=2.0.0->evaluate) (3.9.1)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.0->accelerate==0.27.2) (3.1.1)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->evaluate) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->evaluate) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->evaluate) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->evaluate) (2024.2.2)\nRequirement already satisfied: greenlet!=0.4.17 in /opt/conda/lib/python3.10/site-packages (from sqlalchemy<2.0.0,>=1.3.2->dataset) (3.0.3)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch) (2.1.3)\nRequirement already satisfied: mpmath>=0.19 in /opt/conda/lib/python3.10/site-packages (from sympy->torch) (1.3.0)\nRequirement already satisfied: attrs>=17.3.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (23.2.0)\nRequirement already satisfied: multidict<7.0,>=4.5 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (6.0.4)\nRequirement already satisfied: yarl<2.0,>=1.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (1.9.3)\nRequirement already satisfied: frozenlist>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (1.4.1)\nRequirement already satisfied: aiosignal>=1.1.2 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (1.3.1)\nRequirement already satisfied: async-timeout<5.0,>=4.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (4.0.3)\nDownloading accelerate-0.27.2-py3-none-any.whl (279 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m280.0/280.0 kB\u001b[0m \u001b[31m15.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading evaluate-0.4.1-py3-none-any.whl (84 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m84.1/84.1 kB\u001b[0m \u001b[31m6.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading dataset-1.6.2-py2.py3-none-any.whl (18 kB)\nDownloading banal-1.0.6-py2.py3-none-any.whl (6.1 kB)\nDownloading responses-0.18.0-py3-none-any.whl (38 kB)\nDownloading SQLAlchemy-1.4.52-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.6 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.6/1.6 MB\u001b[0m \u001b[31m61.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hInstalling collected packages: banal, sqlalchemy, responses, dataset, accelerate, evaluate\n  Attempting uninstall: sqlalchemy\n    Found existing installation: SQLAlchemy 2.0.25\n    Uninstalling SQLAlchemy-2.0.25:\n      Successfully uninstalled SQLAlchemy-2.0.25\n  Attempting uninstall: accelerate\n    Found existing installation: accelerate 0.29.3\n    Uninstalling accelerate-0.29.3:\n      Successfully uninstalled accelerate-0.29.3\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\nipython-sql 0.5.0 requires sqlalchemy>=2.0, but you have sqlalchemy 1.4.52 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0mSuccessfully installed accelerate-0.27.2 banal-1.0.6 dataset-1.6.2 evaluate-0.4.1 responses-0.18.0 sqlalchemy-1.4.52\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### 클래스 별로 이미지 정리","metadata":{}},{"cell_type":"code","source":"!pip install -q -U transformers==4.38.2\n!pip install -q -U datasets==2.18.0\n!pip install -q -U bitsandbytes==0.42.0\n!pip install -q -U peft==0.9.0\n!pip install -q -U trl==0.7.11\n!pip install -q -U accelerate==0.27.2","metadata":{"execution":{"iopub.status.busy":"2024-04-30T09:18:34.590112Z","iopub.execute_input":"2024-04-30T09:18:34.590406Z","iopub.status.idle":"2024-04-30T09:20:07.378046Z","shell.execute_reply.started":"2024-04-30T09:18:34.590380Z","shell.execute_reply":"2024-04-30T09:20:07.376905Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"from huggingface_hub import notebook_login\nnotebook_login()","metadata":{"execution":{"iopub.status.busy":"2024-04-30T09:20:07.379584Z","iopub.execute_input":"2024-04-30T09:20:07.379895Z","iopub.status.idle":"2024-04-30T09:20:07.682292Z","shell.execute_reply.started":"2024-04-30T09:20:07.379866Z","shell.execute_reply":"2024-04-30T09:20:07.681236Z"},"trusted":true},"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/plain":"VBox(children=(HTML(value='<center> <img\\nsrc=https://huggingface.co/front/assets/huggingface_logo-noborder.sv…","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"073eb3c6707f46e1a5efa51989dc4b9e"}},"metadata":{}}]},{"cell_type":"code","source":"# access token을 복사하세요.\nHF_TOKEN = \"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\"","metadata":{"execution":{"iopub.status.busy":"2024-04-30T09:20:07.685506Z","iopub.execute_input":"2024-04-30T09:20:07.685895Z","iopub.status.idle":"2024-04-30T09:20:07.690527Z","shell.execute_reply.started":"2024-04-30T09:20:07.685861Z","shell.execute_reply":"2024-04-30T09:20:07.689398Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"import os\nimport pandas as pd\nimport shutil\nimport peft\nfrom tqdm.auto import notebook_tqdm\nfrom sklearn.model_selection import train_test_split","metadata":{"execution":{"iopub.status.busy":"2024-04-30T09:20:07.691835Z","iopub.execute_input":"2024-04-30T09:20:07.692192Z","iopub.status.idle":"2024-04-30T09:20:14.481120Z","shell.execute_reply.started":"2024-04-30T09:20:07.692148Z","shell.execute_reply":"2024-04-30T09:20:14.480301Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/prepare-data/train.csv')\ntrain_df, valid_df = train_test_split(df, test_size=0.1, random_state=42,shuffle=True)\ntrain_df.reset_index(inplace=True, drop=True)\nvalid_df.reset_index(inplace=True, drop=True)\n\ntrain_df.to_csv(\"./prepare-data/train_df.csv\", index=False)\nvalid_df.to_csv(\"./prepare-data/valid_df.csv\", index=False)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T09:20:14.482337Z","iopub.execute_input":"2024-04-30T09:20:14.482922Z","iopub.status.idle":"2024-04-30T09:20:14.617917Z","shell.execute_reply.started":"2024-04-30T09:20:14.482893Z","shell.execute_reply":"2024-04-30T09:20:14.617084Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"train_df['label'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-04-30T09:20:14.619080Z","iopub.execute_input":"2024-04-30T09:20:14.619440Z","iopub.status.idle":"2024-04-30T09:20:14.635618Z","shell.execute_reply.started":"2024-04-30T09:20:14.619410Z","shell.execute_reply":"2024-04-30T09:20:14.634695Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"label\nRuddy Shelduck               609\nRed-Wattled Lapwing          608\nWhite-Breasted Kingfisher    604\nWhite Wagtail                598\nCommon Rosefinch             597\nGray Wagtail                 595\nCommon Kingfisher            587\nNorthern Lapwing             587\nJungle Babbler               587\nSarus Crane                  586\nWhite-Breasted Waterhen      585\nHouse Crow                   580\nIndian Peacock               577\nCommon Tailorbird            575\nBrown-Headed Barbet          574\nCommon Myna                  570\nIndian Grey Hornbill         570\nIndian Roller                568\nHoopoe                       564\nRufous Treepie               562\nCattle Egret                 561\nAsian Green Bee-Eater        556\nForest Wagtail               555\nCoppersmith Barbet           500\nIndian Pitta                 395\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"train_dir = \"./prepare_data/train/\"\nvalid_dir = \"./prepare_data/valid/\"\n\ndef make_data(df, output_dir):\n    for index, row in notebook_tqdm(df.iterrows()):\n        src_path = os.path.join('/kaggle/input/prepare-data', row['img_path'].lstrip('./'))\n        label = row['label']\n        dest_dir = os.path.join(output_dir, label)\n    \n        if not os.path.exists(dest_dir):\n            os.makedirs(dest_dir)\n    \n        file_name = os.path.basename(src_path)\n        dest_path = os.path.join(dest_dir, file_name)\n\n        # 파일 존재 여부 확인\n        if os.path.exists(src_path):\n            shutil.copy(src_path, dest_path)\n        else:\n            print(f\"파일이 존재하지 않습니다: {src_path}\")\n            \n    print(\"파일 이동이 완료되었습니다.\")","metadata":{"execution":{"iopub.status.busy":"2024-04-30T09:20:14.636644Z","iopub.execute_input":"2024-04-30T09:20:14.636936Z","iopub.status.idle":"2024-04-30T09:20:14.644395Z","shell.execute_reply.started":"2024-04-30T09:20:14.636912Z","shell.execute_reply":"2024-04-30T09:20:14.643364Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"# make_data(train_df, train_dir)\n# make_data(valid_df, valid_dir)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T09:20:14.645781Z","iopub.execute_input":"2024-04-30T09:20:14.646073Z","iopub.status.idle":"2024-04-30T09:20:14.653508Z","shell.execute_reply.started":"2024-04-30T09:20:14.646049Z","shell.execute_reply":"2024-04-30T09:20:14.652754Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":"### Huggingface Library를 이용한 이미지 분류","metadata":{}},{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings('ignore')\nimport random\nimport torch\nimport numpy as np\nimport os\nfrom datasets import load_dataset\nfrom evaluate import load\nfrom transformers import AutoModelForImageClassification, AutoImageProcessor, TrainingArguments, Trainer\nfrom trl import SFTTrainer\n\ndef seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = True\n\nseed_everything(42)  \ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')","metadata":{"execution":{"iopub.status.busy":"2024-04-30T09:20:14.656971Z","iopub.execute_input":"2024-04-30T09:20:14.657315Z","iopub.status.idle":"2024-04-30T09:20:26.790399Z","shell.execute_reply.started":"2024-04-30T09:20:14.657282Z","shell.execute_reply":"2024-04-30T09:20:26.789607Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stderr","text":"2024-04-30 09:20:16.541529: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-04-30 09:20:16.541654: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-04-30 09:20:16.657216: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"code","source":"dataset = load_dataset(\"imagefolder\", data_dir=\"./prepare_data/\")\ndataset = dataset.rename_column(\"label\", \"labels\")\n\nmodel_name = \"microsoft/swinv2-large-patch4-window12to16-192to256-22kto1k-ft\"\nprocessor = AutoImageProcessor.from_pretrained(model_name,)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T09:20:26.791502Z","iopub.execute_input":"2024-04-30T09:20:26.791787Z","iopub.status.idle":"2024-04-30T09:21:17.954733Z","shell.execute_reply.started":"2024-04-30T09:20:26.791764Z","shell.execute_reply":"2024-04-30T09:21:17.953854Z"},"trusted":true},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":"Resolving data files:   0%|          | 0/14250 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"66f595abbec44e1fba333f57d2173a54"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Resolving data files:   0%|          | 0/1584 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7b3ef384cc6b4114b5d2b83cb5a2f02d"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Generating train split: 0 examples [00:00, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"06591cef99004110923d15c8b9e8a67a"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Generating validation split: 0 examples [00:00, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"578d0da0db2f48fab60006ab2cb06cd7"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"preprocessor_config.json:   0%|          | 0.00/240 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e33550a7d7cb445cb21bda94a812bcd2"}},"metadata":{}},{"name":"stderr","text":"Could not find image processor class in the image processor config or the model config. Loading based on pattern matching with the model's feature extractor configuration. Please open a PR/issue to update `preprocessor_config.json` to use `image_processor_type` instead of `feature_extractor_type`. This warning will be removed in v4.40.\n","output_type":"stream"}]},{"cell_type":"code","source":"def transform(example_batch):\n    inputs = processor([x for x in example_batch['image']], return_tensors='pt')\n    inputs['labels'] = example_batch['labels']\n    return inputs\n\ndef collate_fn(batch):\n    return {\n        'pixel_values': torch.stack([x['pixel_values'] for x in batch]),\n        'labels': torch.tensor([x['labels'] for x in batch])\n    }","metadata":{"execution":{"iopub.status.busy":"2024-04-30T09:21:17.956059Z","iopub.execute_input":"2024-04-30T09:21:17.956607Z","iopub.status.idle":"2024-04-30T09:21:17.964417Z","shell.execute_reply.started":"2024-04-30T09:21:17.956574Z","shell.execute_reply":"2024-04-30T09:21:17.963095Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"prepared_ds = dataset.with_transform(transform).shuffle()\n\nmetric = load(\"f1\", trust_remote_code=True)\ndef compute_metrics(p):\n    return metric.compute(predictions=np.argmax(p.predictions, axis=1), references=p.label_ids)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T09:21:17.965647Z","iopub.execute_input":"2024-04-30T09:21:17.965988Z","iopub.status.idle":"2024-04-30T09:21:20.065429Z","shell.execute_reply.started":"2024-04-30T09:21:17.965964Z","shell.execute_reply":"2024-04-30T09:21:20.064678Z"},"trusted":true},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":"Downloading builder script:   0%|          | 0.00/6.77k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"43c18e8f08ac4b97b00e7f309dfaf9dd"}},"metadata":{}}]},{"cell_type":"code","source":"import os\nimport pandas as pd\nfrom tqdm.auto import tqdm\n\nimport torch\nfrom datasets import Dataset\nfrom transformers import (AutoTokenizer,\n                          AutoModelForCausalLM,\n                          BitsAndBytesConfig,\n                          pipeline,\n                          TrainingArguments)\nfrom peft import (LoraConfig,\n                  PeftModel)\nfrom trl import SFTTrainer","metadata":{"execution":{"iopub.status.busy":"2024-04-30T09:21:20.066488Z","iopub.execute_input":"2024-04-30T09:21:20.066806Z","iopub.status.idle":"2024-04-30T09:21:20.072520Z","shell.execute_reply.started":"2024-04-30T09:21:20.066782Z","shell.execute_reply":"2024-04-30T09:21:20.071449Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"def print_trainable_parameters(model):\n    trainable_params = 0\n    all_param = 0\n    for _, param in model.named_parameters():\n        all_param += param.numel()\n        if param.requires_grad:\n            trainable_params += param.numel()\n    print(\n        f\"trainable params: {trainable_params} || all params: {all_param} || trainable%: {100 * trainable_params / all_param:.2f}\"\n    )","metadata":{"execution":{"iopub.status.busy":"2024-04-30T09:21:20.073585Z","iopub.execute_input":"2024-04-30T09:21:20.073855Z","iopub.status.idle":"2024-04-30T09:21:20.084287Z","shell.execute_reply.started":"2024-04-30T09:21:20.073832Z","shell.execute_reply":"2024-04-30T09:21:20.083554Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"quantization_config = BitsAndBytesConfig(\n    load_in_8bit=True,\n    bnb_8bit_quant_type=\"lsq\",\n)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T09:21:20.085397Z","iopub.execute_input":"2024-04-30T09:21:20.085673Z","iopub.status.idle":"2024-04-30T09:21:20.095989Z","shell.execute_reply.started":"2024-04-30T09:21:20.085644Z","shell.execute_reply":"2024-04-30T09:21:20.095201Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"lora_config = peft.LoraConfig(\n    r=16,\n    lora_alpha=16,\n    target_modules=['query','key','value'],\n    lora_dropout=0.1,\n    bias=\"none\",\n    modules_to_save=[\"classifier\"]\n)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T09:21:20.097011Z","iopub.execute_input":"2024-04-30T09:21:20.097338Z","iopub.status.idle":"2024-04-30T09:21:20.105468Z","shell.execute_reply.started":"2024-04-30T09:21:20.097314Z","shell.execute_reply":"2024-04-30T09:21:20.104622Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"from peft import LoraConfig, get_peft_model","metadata":{"execution":{"iopub.status.busy":"2024-04-30T09:21:20.106513Z","iopub.execute_input":"2024-04-30T09:21:20.106829Z","iopub.status.idle":"2024-04-30T09:21:20.114080Z","shell.execute_reply.started":"2024-04-30T09:21:20.106798Z","shell.execute_reply":"2024-04-30T09:21:20.113144Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"labels = dataset['train'].features['labels'].names\n\nmodel = AutoModelForImageClassification.from_pretrained(\n    model_name,\n#     quantization_config=quantization_config,\n    num_labels=len(labels),\n    id2label={str(i): c for i, c in enumerate(labels)},\n    label2id={c: str(i) for i, c in enumerate(labels)},\n    ignore_mismatched_sizes=True,\n    token=HF_TOKEN,\n)\n\nprint_trainable_parameters(model)\nlora_model = get_peft_model(model, lora_config)\nprint_trainable_parameters(lora_model)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T09:21:20.115373Z","iopub.execute_input":"2024-04-30T09:21:20.116353Z","iopub.status.idle":"2024-04-30T09:21:45.029031Z","shell.execute_reply.started":"2024-04-30T09:21:20.116327Z","shell.execute_reply":"2024-04-30T09:21:45.028016Z"},"trusted":true},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/69.9k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"cd38cd1d32594befa1df91afc49912e0"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"pytorch_model.bin:   0%|          | 0.00/787M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ce9595e80ae541128eedf45d7fd84512"}},"metadata":{}},{"name":"stderr","text":"Some weights of Swinv2ForImageClassification were not initialized from the model checkpoint at microsoft/swinv2-large-patch4-window12to16-192to256-22kto1k-ft and are newly initialized because the shapes did not match:\n- classifier.weight: found shape torch.Size([1000, 1536]) in the checkpoint and torch.Size([25, 1536]) in the model instantiated\n- classifier.bias: found shape torch.Size([1000]) in the checkpoint and torch.Size([25]) in the model instantiated\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n","output_type":"stream"},{"name":"stdout","text":"trainable params: 195241357 || all params: 195241357 || trainable%: 100.00\ntrainable params: 1771033 || all params: 197012390 || trainable%: 0.90\n","output_type":"stream"}]},{"cell_type":"code","source":"training_args = TrainingArguments(\n    output_dir=\"./results/swinvit-experience-1\",\n    remove_unused_columns=False,\n    evaluation_strategy=\"epoch\",\n    save_strategy=\"epoch\",\n    learning_rate=5e-5,\n    per_device_train_batch_size=16,\n    gradient_accumulation_steps=4,\n    per_device_eval_batch_size=16,\n    fp16=True,\n    num_train_epochs=5,\n    load_best_model_at_end=True,\n    logging_steps=10,\n    save_total_limit=2,\n    label_smoothing_factor=0.1,\n    warmup_ratio=0.1,\n    metric_for_best_model=\"f1\",\n    seed=42,\n    push_to_hub=False,\n    label_names=[\"labels\"],\n    peft_config=lora_config,  # QLoRA config\n)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T09:21:45.030264Z","iopub.execute_input":"2024-04-30T09:21:45.030582Z","iopub.status.idle":"2024-04-30T09:21:45.040420Z","shell.execute_reply.started":"2024-04-30T09:21:45.030556Z","shell.execute_reply":"2024-04-30T09:21:45.039517Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"trainer = Trainer(\n    model=lora_model,\n    args=training_args,\n    data_collator=collate_fn,\n    compute_metrics=compute_metrics,\n    train_dataset=prepared_ds[\"train\"],\n    eval_dataset=prepared_ds[\"validation\"],\n    tokenizer=processor,\n)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T09:31:33.256074Z","iopub.execute_input":"2024-04-30T09:31:33.256436Z","iopub.status.idle":"2024-04-30T09:31:33.691783Z","shell.execute_reply.started":"2024-04-30T09:31:33.256406Z","shell.execute_reply":"2024-04-30T09:31:33.689945Z"},"trusted":true},"execution_count":1,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[1], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m trainer \u001b[38;5;241m=\u001b[39m \u001b[43mTrainer\u001b[49m(\n\u001b[1;32m      2\u001b[0m     model\u001b[38;5;241m=\u001b[39mlora_model,\n\u001b[1;32m      3\u001b[0m     args\u001b[38;5;241m=\u001b[39mtraining_args,\n\u001b[1;32m      4\u001b[0m     data_collator\u001b[38;5;241m=\u001b[39mcollate_fn,\n\u001b[1;32m      5\u001b[0m     compute_metrics\u001b[38;5;241m=\u001b[39mcompute_metrics,\n\u001b[1;32m      6\u001b[0m     train_dataset\u001b[38;5;241m=\u001b[39mprepared_ds[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtrain\u001b[39m\u001b[38;5;124m\"\u001b[39m],\n\u001b[1;32m      7\u001b[0m     eval_dataset\u001b[38;5;241m=\u001b[39mprepared_ds[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mvalidation\u001b[39m\u001b[38;5;124m\"\u001b[39m],\n\u001b[1;32m      8\u001b[0m     tokenizer\u001b[38;5;241m=\u001b[39mprocessor,\n\u001b[1;32m      9\u001b[0m )\n","\u001b[0;31mNameError\u001b[0m: name 'Trainer' is not defined"],"ename":"NameError","evalue":"name 'Trainer' is not defined","output_type":"error"}]},{"cell_type":"code","source":"train_results = trainer.train()\ntrainer.save_model()\ntrainer.log_metrics(\"train\", train_results.metrics)\ntrainer.save_metrics(\"train\", train_results.metrics)\ntrainer.save_state()","metadata":{"execution":{"iopub.status.busy":"2024-04-30T09:21:45.457587Z","iopub.execute_input":"2024-04-30T09:21:45.458420Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stderr","text":"\u001b[34m\u001b[1mwandb\u001b[0m: Logging into wandb.ai. (Learn how to deploy a W&B server locally: https://wandb.me/wandb-server)\n\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n\u001b[34m\u001b[1mwandb\u001b[0m: Paste an API key from your profile and hit enter, or press ctrl+c to quit:","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"  ········································\n"},{"name":"stderr","text":"\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Tracking run with wandb version 0.16.6"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Run data is saved locally in <code>/kaggle/working/wandb/run-20240430_092157-dz6f26aa</code>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Syncing run <strong><a href='https://wandb.ai/sikaro/huggingface/runs/dz6f26aa' target=\"_blank\">likely-snow-5</a></strong> to <a href='https://wandb.ai/sikaro/huggingface' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View project at <a href='https://wandb.ai/sikaro/huggingface' target=\"_blank\">https://wandb.ai/sikaro/huggingface</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View run at <a href='https://wandb.ai/sikaro/huggingface/runs/dz6f26aa' target=\"_blank\">https://wandb.ai/sikaro/huggingface/runs/dz6f26aa</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='32' max='1110' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [  32/1110 02:09 < 1:17:21, 0.23 it/s, Epoch 0.14/5]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Epoch</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table><p>"},"metadata":{}}]},{"cell_type":"code","source":"metrics = trainer.evaluate(prepared_ds['validation'])\ntrainer.log_metrics(\"eval\", metrics)\ntrainer.save_metrics(\"eval\", metrics)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 추론","metadata":{}},{"cell_type":"code","source":"import os\nimport pandas as pd\nfrom PIL import Image\nfrom transformers import AutoImageProcessor, AutoModelForImageClassification, pipeline\nfrom tqdm.auto import notebook_tqdm","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_name = \"microsoft/swinv2-large-patch4-window12to16-192to256-22kto1k-ft\"\nprocessor = AutoImageProcessor.from_pretrained(model_name, return_tensor=\"pt\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model = AutoModelForImageClassification.from_pretrained(\"./best/checkpoint-2341/\")\nmodel.eval()\n\nclassifier = pipeline(\"image-classification\", model=model, image_processor=processor)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_df = pd.read_csv(\"./data/test.csv\")\ntest_df.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_file_name = test_df['img_path'].to_list()\n\npredict_labels = []\n\nfor idx, name in notebook_tqdm(enumerate(test_file_name), total=len(test_file_name)):\n    image = Image.open(os.path.join(\"./data/\", name.strip('./')))\n    predict_labels.append(classifier(image)[0]['label'])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission_df = pd.read_csv(\"./data/sample_submission.csv\")\nsubmission_df.head()\nsubmission_df['label'] = predict_labels\nsubmission_df.to_csv(\"./submission.csv\", index=False)","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}